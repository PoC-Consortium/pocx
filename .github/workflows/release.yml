name: Release

# TESTING MODE: workflow_dispatch enabled for manual testing
# PRODUCTION MODE: Uncomment 'push.tags' section below after testing
on:
  # push:
  #   tags:
  #     - 'v[0-9]+.[0-9]+.[0-9]+*'  # v1.0.0, v1.0.0-beta, v1.0.0-rc1, etc.

  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0-beta)'
        required: true
        default: 'v0.0.1-test'
      draft:
        description: 'Create as draft release?'
        required: true
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  CARGO_TERM_COLOR: always

jobs:
  # Reuse the exact same build process from CI
  # No testing needed - master is already tested via PR workflow
  build:
    name: Build - ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            cross: false
            features: simd
            opencl: false

          # Linux x86_64 with OpenCL
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            cross: false
            features: simd,opencl
            opencl: true

          # Linux ARM64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            cross: true
            features: ""
            opencl: false

          # Windows x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            cross: false
            features: simd
            opencl: false

          # macOS x86_64
          - os: macos-13
            target: x86_64-apple-darwin
            cross: false
            features: simd
            opencl: false

          # macOS x86_64 with OpenCL
          - os: macos-13
            target: x86_64-apple-darwin
            cross: false
            features: simd,opencl
            opencl: true

          # macOS ARM64 (Apple Silicon)
          - os: macos-14
            target: aarch64-apple-darwin
            cross: false
            features: ""
            opencl: false

          # macOS ARM64 with OpenCL
          - os: macos-14
            target: aarch64-apple-darwin
            cross: false
            features: opencl
            opencl: true

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@nightly
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.target }}-target-release-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cross-compilation tools
        if: matrix.cross
        run: |
          cargo install cross --git https://github.com/cross-rs/cross --locked || true

      - name: Install OpenCL headers (Linux)
        if: matrix.opencl && runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ocl-icd-opencl-dev

      - name: Build release binaries
        run: |
          FEATURES_FLAG=""
          if [ -n "${{ matrix.features }}" ]; then
            FEATURES_FLAG="--no-default-features --features ${{ matrix.features }}"
          else
            FEATURES_FLAG="--no-default-features"
          fi

          if [ "${{ matrix.cross }}" = "true" ]; then
            cross build --release --target ${{ matrix.target }} \
              -p pocx_miner \
              -p pocx_plotter \
              -p pocx_verifier \
              -p pocx_mockchain \
              $FEATURES_FLAG
          else
            cargo build --release --target ${{ matrix.target }} \
              -p pocx_miner \
              -p pocx_plotter \
              -p pocx_verifier \
              -p pocx_mockchain \
              $FEATURES_FLAG
          fi
        shell: bash
        timeout-minutes: 60

      - name: Prepare release artifacts (Unix)
        if: runner.os != 'Windows'
        run: |
          mkdir -p release-artifacts

          # Get version from tag or input
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.tag }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi

          SUFFIX=""
          if [ "${{ matrix.opencl }}" = "true" ]; then
            SUFFIX="-opencl"
          fi

          # Copy and rename binaries with version
          cp target/${{ matrix.target }}/release/pocx_miner release-artifacts/pocx_miner-${VERSION}-${{ matrix.target }}${SUFFIX}
          cp target/${{ matrix.target }}/release/pocx_plotter release-artifacts/pocx_plotter-${VERSION}-${{ matrix.target }}${SUFFIX}
          cp target/${{ matrix.target }}/release/pocx_verifier release-artifacts/pocx_verifier-${VERSION}-${{ matrix.target }}${SUFFIX}
          cp target/${{ matrix.target }}/release/pocx_mockchain release-artifacts/pocx_mockchain-${VERSION}-${{ matrix.target }}${SUFFIX}

          chmod +x release-artifacts/*

          # Generate checksums
          cd release-artifacts
          sha256sum * > SHA256SUMS-${{ matrix.target }}${SUFFIX}.txt
        shell: bash

      - name: Prepare release artifacts (Windows)
        if: runner.os == 'Windows'
        run: |
          mkdir release-artifacts

          # Get version from tag or input
          if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            $VERSION = "${{ github.event.inputs.tag }}"
          } else {
            $VERSION = "$env:GITHUB_REF" -replace 'refs/tags/', ''
          }

          # Copy and rename binaries with version
          Copy-Item target/${{ matrix.target }}/release/pocx_miner.exe release-artifacts/pocx_miner-${VERSION}-${{ matrix.target }}.exe
          Copy-Item target/${{ matrix.target }}/release/pocx_plotter.exe release-artifacts/pocx_plotter-${VERSION}-${{ matrix.target }}.exe
          Copy-Item target/${{ matrix.target }}/release/pocx_verifier.exe release-artifacts/pocx_verifier-${VERSION}-${{ matrix.target }}.exe
          Copy-Item target/${{ matrix.target }}/release/pocx_mockchain.exe release-artifacts/pocx_mockchain-${VERSION}-${{ matrix.target }}.exe

          # Generate checksums
          cd release-artifacts
          Get-ChildItem -File -Exclude "*.txt" | ForEach-Object {
            $hash = (Get-FileHash -Algorithm SHA256 $_.Name).Hash.ToLower()
            "$hash  $($_.Name)" | Out-File -Append -Encoding ASCII SHA256SUMS-${{ matrix.target }}.txt
          }
        shell: powershell

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.target }}${{ matrix.opencl && '-opencl' || '' }}
          path: release-artifacts/*
          retention-days: 7

  create-release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find all-artifacts -type f -exec cp {} release-assets/ \;

          # Combine all SHA256SUMS into one master file
          cd release-assets
          cat SHA256SUMS-*.txt | sort > SHA256SUMS.txt
          rm SHA256SUMS-*.txt

          # Create a README for the release
          cat > README.txt << 'HEREDOC_EOF'
          PoCX Release Binaries
          =====================

          This release contains pre-built binaries for multiple platforms.

          Platform Support:
          - Linux x86_64 (with/without OpenCL)
          - Linux ARM64
          - Windows x86_64
          - macOS x86_64 (with/without OpenCL)
          - macOS ARM64 (with/without OpenCL)

          Binaries Included:
          - pocx_miner: Mining client
          - pocx_plotter: Plot file generator
          - pocx_verifier: Plot file verification tool
          - pocx_mockchain: Mock blockchain for testing

          Verification:
          All binaries can be verified using SHA256SUMS.txt

          Installation:
          1. Download the binary for your platform
          2. Verify checksum: sha256sum -c SHA256SUMS.txt
          3. Make executable (Linux/macOS): chmod +x pocx_*
          4. Run: ./pocx_miner --help

          For source code and documentation, visit:
          https://github.com/PoC-Consortium/pocx
          HEREDOC_EOF

          ls -lh

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Release ${{ steps.version.outputs.tag }}
          draft: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.draft == 'true' || false }}
          prerelease: ${{ contains(steps.version.outputs.tag, '-beta') || contains(steps.version.outputs.tag, '-rc') || contains(steps.version.outputs.tag, '-alpha') }}
          generate_release_notes: true
          files: |
            release-assets/*
          body: |
            ## PoCX ${{ steps.version.outputs.tag }}

            Multi-platform release with pre-built binaries for all supported platforms.

            ### 📦 Binary Packages

            This release includes 32 binary packages:
            - 4 programs (miner, plotter, verifier, mockchain)
            - 8 platform variants (Linux x86_64/ARM64, Windows x86_64, macOS x86_64/ARM64, with/without OpenCL)

            ### ✅ Verification

            All binaries include SHA256 checksums in `SHA256SUMS.txt`

            ```bash
            # Verify download
            sha256sum -c SHA256SUMS.txt
            ```

            ### 📋 Installation

            **Linux/macOS:**
            ```bash
            # Download and make executable
            chmod +x pocx_miner-*
            ./pocx_miner-* --version
            ```

            **Windows:**
            ```powershell
            # Download and run
            .\pocx_miner-*.exe --version
            ```

            See `README.txt` in the release assets for detailed instructions.
