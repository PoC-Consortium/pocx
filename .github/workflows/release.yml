name: Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'  # v1.0.0, v1.0.0-beta, v1.0.0-rc1, etc.

  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0-beta)'
        required: true
        default: 'v0.0.1-test'

env:
  CARGO_TERM_COLOR: always

jobs:
  # Reuse the exact same build process from CI
  # No testing needed - master is already tested via PR workflow
  build:
    name: Build - ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            cross: false
            features: simd
            opencl: false

          # Linux x86_64 with OpenCL
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            cross: false
            features: simd,opencl
            opencl: true

          # Linux ARM64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            cross: true
            features: ""
            opencl: false

          # Android ARM64
          - os: ubuntu-latest
            target: aarch64-linux-android
            cross: true
            features: ""
            opencl: false

          # Windows x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            cross: false
            features: simd
            opencl: false

          # macOS x86_64
          - os: macos-13
            target: x86_64-apple-darwin
            cross: false
            features: simd
            opencl: false

          # macOS x86_64 with OpenCL
          - os: macos-13
            target: x86_64-apple-darwin
            cross: false
            features: simd,opencl
            opencl: true

          # macOS ARM64 (Apple Silicon)
          - os: macos-14
            target: aarch64-apple-darwin
            cross: false
            features: ""
            opencl: false

          # macOS ARM64 with OpenCL
          - os: macos-14
            target: aarch64-apple-darwin
            cross: false
            features: opencl
            opencl: true

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@nightly
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.target }}-target-release-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cross-compilation tools
        if: matrix.cross
        run: |
          cargo install cross --git https://github.com/cross-rs/cross --locked || true

      - name: Install OpenCL headers (Linux)
        if: matrix.opencl && runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ocl-icd-opencl-dev

      - name: Build release binaries
        run: |
          FEATURES_FLAG=""
          if [ -n "${{ matrix.features }}" ]; then
            FEATURES_FLAG="--no-default-features --features ${{ matrix.features }}"
          else
            FEATURES_FLAG="--no-default-features"
          fi

          if [ "${{ matrix.cross }}" = "true" ]; then
            cross build --release --target ${{ matrix.target }} \
              -p pocx_miner \
              -p pocx_plotter \
              -p pocx_verifier \
              -p pocx_aggregator \
              -p pocx_mockchain \
              $FEATURES_FLAG
          else
            cargo build --release --target ${{ matrix.target }} \
              -p pocx_miner \
              -p pocx_plotter \
              -p pocx_verifier \
              -p pocx_aggregator \
              -p pocx_mockchain \
              $FEATURES_FLAG
          fi
        shell: bash
        timeout-minutes: 60

      - name: Prepare release artifacts (Unix)
        if: runner.os != 'Windows'
        run: |
          mkdir -p staging release-artifacts

          # Get version from tag or input
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.tag }}"
          elif [[ "$GITHUB_REF" == refs/tags/* ]]; then
            VERSION="${GITHUB_REF#refs/tags/}"
          else
            VERSION="v0.0.1-test"
          fi

          SUFFIX=""
          if [ "${{ matrix.opencl }}" = "true" ]; then
            SUFFIX="-opencl"
          fi

          # Copy binaries to staging
          cp target/${{ matrix.target }}/release/pocx_miner staging/
          cp target/${{ matrix.target }}/release/pocx_plotter staging/
          cp target/${{ matrix.target }}/release/pocx_verifier staging/
          cp target/${{ matrix.target }}/release/pocx_aggregator staging/
          cp target/${{ matrix.target }}/release/pocx_mockchain staging/
          chmod +x staging/*

          # Copy config files
          cp pocx_miner/miner_config.yaml staging/
          cp pocx_aggregator/aggregator_config.yaml staging/
          cp pocx_mockchain/mockchain_config.toml staging/

          # Create archive
          ARCHIVE_NAME="pocx-${VERSION}-${{ matrix.target }}${SUFFIX}.tar.gz"
          tar -czf "release-artifacts/${ARCHIVE_NAME}" -C staging .
        shell: bash

      - name: Prepare release artifacts (Windows)
        if: runner.os == 'Windows'
        run: |
          New-Item -ItemType Directory -Path staging, release-artifacts -Force

          # Get version from tag or input
          if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            $VERSION = "${{ github.event.inputs.tag }}"
          } elseif ($env:GITHUB_REF -like "refs/tags/*") {
            $VERSION = $env:GITHUB_REF -replace 'refs/tags/', ''
          } else {
            $VERSION = "v0.0.1-test"
          }

          # Copy binaries to staging
          Copy-Item target/${{ matrix.target }}/release/pocx_miner.exe staging/
          Copy-Item target/${{ matrix.target }}/release/pocx_plotter.exe staging/
          Copy-Item target/${{ matrix.target }}/release/pocx_verifier.exe staging/
          Copy-Item target/${{ matrix.target }}/release/pocx_aggregator.exe staging/
          Copy-Item target/${{ matrix.target }}/release/pocx_mockchain.exe staging/

          # Copy config files
          Copy-Item pocx_miner/miner_config.yaml staging/
          Copy-Item pocx_aggregator/aggregator_config.yaml staging/
          Copy-Item pocx_mockchain/mockchain_config.toml staging/

          # Create archive
          $ARCHIVE_NAME = "pocx-${VERSION}-${{ matrix.target }}.zip"
          Compress-Archive -Path staging/* -DestinationPath "release-artifacts/$ARCHIVE_NAME"
        shell: powershell

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.target }}${{ matrix.opencl && '-opencl' || '' }}
          path: release-artifacts/*
          retention-days: 7

  create-release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find all-artifacts -type f -exec cp {} release-assets/ \;

          cd release-assets
          ls -lh

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          elif [[ "$GITHUB_REF" == refs/tags/* ]]; then
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "tag=v0.0.1-test" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Release ${{ steps.version.outputs.tag }}
          draft: true  # Always create as draft - publish manually after verification
          prerelease: ${{ contains(steps.version.outputs.tag, '-beta') || contains(steps.version.outputs.tag, '-rc') || contains(steps.version.outputs.tag, '-alpha') }}
          generate_release_notes: false
          files: |
            release-assets/*
          body: |
            ## PoCX ${{ steps.version.outputs.tag }}

            Pre-built binaries for all supported platforms.

            **Platforms:**
            - Linux x86_64 / ARM64 (with/without OpenCL)
            - Android ARM64
            - Windows x86_64
            - macOS x86_64 / ARM64 (with/without OpenCL)

            **Binaries:**
            - `pocx_miner` - Mining client
            - `pocx_plotter` - Plot file generator
            - `pocx_verifier` - Plot verification tool
            - `pocx_aggregator` - Mining proxy/aggregator
            - `pocx_mockchain` - Mock blockchain for testing

            **Configuration Files:**
            - `miner_config.yaml` - Miner configuration template
            - `aggregator_config.yaml` - Aggregator configuration template
            - `mockchain_config.toml` - Mockchain configuration template

            **Installation:**
            ```bash
            # Linux/macOS
            tar -xzf pocx-*.tar.gz
            ./pocx_miner --version

            # Windows
            # Extract pocx-*.zip
            .\pocx_miner.exe --version
            ```
